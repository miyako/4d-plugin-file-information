/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-File-Information.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : File Information
 #	author : miyako
 #	2019/12/13
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-File-Information.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- File Information
            
			case 1 :
				FILE_Get_information(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void FILE_Get_information(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    ARRAY_TEXT Param2;
    ARRAY_TEXT Param3;
    C_LONGINT returnValue;

#ifdef _WIN32
    Param1.fromParamAtIndex(pParams, 1);
    Param2.setSize(1);
    Param3.setSize(1);
    
    DWORD flags = FILE_VER_GET_LOCALISED | FILE_VER_GET_NEUTRAL;
    LPCTSTR path = (LPCTSTR)Param1.getUTF16StringPtr();
    DWORD h;    //this parameter exists for historical reasons.
    
    //DWORD size = GetFileVersionInfoSizeEx(flags, path, &h);
    DWORD size = GetFileVersionInfoSize(path, &h);

    if(size){
        
        std::vector<char> buf(size);
        //if(GetFileVersionInfoEx(flags | FILE_VER_GET_PREFETCHED, path, h, size, (LPVOID)&buf[0])){
        if(GetFileVersionInfo(path, h, size, (LPVOID)&buf[0])){
            
            struct LANGANDCODEPAGE {
                WORD wLanguage;
                WORD wCodePage;
            } *lpTranslate;
            
            UINT len;
            
            if(VerQueryValue((LPCVOID)&buf[0],
                             L"\\VarFileInfo\\Translation",
                             (LPVOID *)&lpTranslate,
                             &len)){
                
                wchar_t *params[] = {
                    L"Comments",
                    L"CompanyName",
                    L"FileDescription",
                    L"FileVersion",
                    L"InternalName",
                    L"LegalCopyright",
                    L"LegalTrademarks",
                    L"OriginalFilename",
                    L"ProductVersion",
                    L"PrivateBuild",
                    L"SpecialBuild"
                };
                          
                wchar_t tmp[STRTEMP_SIZE];
                
                for(unsigned int i = 0; i < (len/sizeof(struct LANGANDCODEPAGE)); ++i)
                {
                    for(unsigned int j = 0; j < PARAMS_SIZE; ++j){
                    
                        if(!StringCchPrintf(tmp, STRTEMP_SIZE,
                                           TEXT("\\StringFileInfo\\%04x%04x\\%s"),
                                           lpTranslate[i].wLanguage,
                                           lpTranslate[i].wCodePage,
                                           params[j]))
                        {
                        
                            LPVOID lpBuffer;
                            
                            if(VerQueryValue((LPCVOID)&buf[0],
                                             tmp,
                                             &lpBuffer,
                                             &len)){
                                                    Param2.appendUTF16String((const PA_Unichar *)params[j]);
                                                    Param3.appendUTF16String((const PA_Unichar *)lpBuffer);
                            }else{
                                    Param2.appendUTF16String((const PA_Unichar *)params[j]);
                                    Param3.appendUTF16String((const PA_Unichar *)L"");
                            }
                        }
                    }
                }
            }
        }else{
            returnValue.setIntValue(ERR_CANT_GET_INFO);
        }
    }else{
        returnValue.setIntValue(ERR_CANT_GET_SIZE);
    }
    
#endif
    Param2.toParamAtIndex(pParams, 2);
    Param3.toParamAtIndex(pParams, 3);
    returnValue.setReturn(pResult);
}

